version: "3.8"

services:
  redis-container:
    image: redis:latest
    container_name: redis-container
    networks:
      - chat_network
    ports:
      - "6379:6379"
    restart: always

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    networks:
      - chat_network
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    networks:
      - chat_network
    ports:
      - "9042:9042"
      - "9160:9160"
    depends_on:
      - elasticsearch
      - kibana
      - logstash
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
    volumes:
      - cassandra-data:/var/lib/cassandra

  init-cassandra:
    image: init-cassandra # dedder98/init-cassandra:latest
    # platform: linux/amd64
    container_name: init-cassandra
    build:
      context: ./cassandra
      dockerfile: init.Dockerfile
    networks:
      - chat_network
    depends_on:
      - cassandra
    restart: "no"

  chat-sd:
    image: chat-sd # dedder98/chat-sd:latest
    # platform: linux/amd64
    container_name: chat-sd
    build:
      context: ./chat-sd/app
      dockerfile: Dockerfile
    networks:
      - chat_network
    ports:
      - "8888:8888"
    environment:
      - FRONTEND_URL=http://localhost:3000
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
    depends_on:
      - redis-container
      - init-cassandra
    restart: always

  chat-messages:
    image: chat-messages # dedder98/chat-messages:latest
    # platform: linux/amd64
    container_name: chat-messages
    build:
      context: ./chat-messages/app
      dockerfile: Dockerfile
    networks:
      - chat_network
    ports:
      - "5678:5678"
    environment:
      - FRONTEND_URL=http://localhost:3000
      - RABBITMQ_URL=amqp://rabbitmq
      - CASSANDRA_POINT=cassandra
    depends_on:
      - redis-container
      - init-cassandra
      - elasticsearch
    restart: always

  chat-ws:
    image: chat-ws # dedder98/chat-ws:latest
    # platform: linux/amd64
    container_name: chat-ws
    build:
      context: ./chat-ws/app
      dockerfile: Dockerfile
    networks:
      - chat_network
    ports:
      - "4321:4321"
    environment:
      - SERVER_HOST=http://localhost:7777
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
      - PORT=4321
      - RABBITMQ_URL=amqp://rabbitmq
    depends_on:
      - redis-container
      - init-cassandra
    restart: always

  chat-web:
    image: chat-web # dedder98/chat-web:latest
    container_name: chat-web
    build:
      context: ./chat-web/app
      dockerfile: Dockerfile
    networks:
      - chat_network
    ports:
      - "3000:80"
    environment:
      - VITE_APP_SERVICE_DISCOVERY_URL=http://localhost:8888
      - VITE_APP_MESSAGING_SERVICE_URL=http://localhost:5678
      - VITE_APP_PRESENCE_URL=http://localhost:7777
      - VITE_APP_FEDERATED_GRAPH=http://localhost:4000
      - VITE_APP_ENABLE_GRAPH=true
      - VITE_APP_DISABLE_CHAT_SD=true
      - VITE_APP_WS_URL=localhost:4321
    depends_on:
      - chat-sd
      - chat-messages
      - chat-ws
      - chat-presence
    restart: always

  chat-presence:
    image: chat-presence # dedder98/chat-presence:latest
    # platform: linux/amd64
    container_name: chat-presence
    build:
      context: ./chat-presence/app
      dockerfile: Dockerfile
    networks:
      - chat_network
    ports:
      - "7777:7777"
    environment:
      - FRONTEND_URL=http://localhost:3000
      - RABBITMQ_URL=amqp://rabbitmq
      - CASSANDRA_POINT=cassandra
    depends_on:
      - redis-container
      - init-cassandra
    restart: always

  mesh:
    # The url's in the supergraph.graphql are not localhost but the name of the services.
    # Create a mesh-compose container and replace the url's in the schema.
    image: mesh-compose
    container_name: mesh
    networks:
      - chat_network
    ports:
      - "4000:4000"
    environment:
      - MESSAGING_SERVICE_URL=http://chat-messages:5678
    depends_on:
      - chat-messages
    restart: always

  prometheus:
    # image: dedder98/prometheus:latest
    # platform: linux/amd64
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - chat_network
    restart: always

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "6767:3000"
    networks:
      - chat_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=QwNnicjy21lVGL+Tp0jK
      - KIBANA_USER=kibanadied3
      - KIBANA_PASS=kibana123
      - LOGSTASH_USER=logstash_internal2
      - LOGSTASH_PASS=logstash123
      - xpack.security.enabled=false
      - transport.port=9300
      - http.port=9200
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/init.sh:/usr/local/bin/init-elasticsearch-users.sh
    command: >
      bash -c "/usr/share/elasticsearch/bin/elasticsearch & sleep 10 && /usr/local/bin/init-elasticsearch-users.sh && wait"
    networks:
      - chat_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
      - ELASTICSEARCH_USERNAME=kibanadied3
      - ELASTICSEARCH_PASSWORD=kibana123
    ports:
      - "5601:5601"
    networks:
      - chat_network
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - LOGSTASH_PORT=5044
      - ELASTIC_PASSWORD=QwNnicjy21lVGL+Tp0jK
      - ELASTIC_HOST=http://elasticsearch:9200
      - ELASTIC_USERNAME=logstash_internal2
      - ELASTIC_PASSWORD=logstash123
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - chat_network
    depends_on:
      - elasticsearch

networks:
  chat_network:
    driver: bridge

volumes:
  cassandra-data: