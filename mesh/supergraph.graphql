schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    
  {
    query: Query
    mutation: Mutation
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  CHAT_MESSAGES @join__graph(name: "chat-messages", url: "http://localhost:5678/graphql") 
  CHAT_PRESENCE @join__graph(name: "chat-presence", url: "http://localhost:7777/graphql") 
}

scalar Date @join__type(graph: CHAT_MESSAGES) 

scalar TransportOptions @join__type(graph: CHAT_MESSAGES)  @join__type(graph: CHAT_PRESENCE) 

type Query @join__type(graph: CHAT_MESSAGES)  @join__type(graph: CHAT_PRESENCE)  {
  messages(name: String!) : [Message!]! @join__field(graph: CHAT_MESSAGES) 
  _empty: String @join__field(graph: CHAT_PRESENCE) 
}

type Message @join__type(graph: CHAT_MESSAGES)  {
  id: ID!
  text: String!
  from: String!
  to: String!
  status: MessageStatus!
  timestamp: Date!
}

type Mutation @join__type(graph: CHAT_PRESENCE)  {
  heartbeat(uid: String!) : Boolean
}

enum MessageStatus @join__type(graph: CHAT_MESSAGES)  {
  QUEUE @join__enumValue(graph: CHAT_MESSAGES) 
  AWAITING @join__enumValue(graph: CHAT_MESSAGES) 
  SEND @join__enumValue(graph: CHAT_MESSAGES) 
  RECEIVED @join__enumValue(graph: CHAT_MESSAGES) 
  READ @join__enumValue(graph: CHAT_MESSAGES) 
}